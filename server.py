from flask import Flask, request, jsonify
import requests
import os
import json
import re  # Pour nettoyer les balises Markdown

app = Flask(__name__)

# üîπ Configuration OpenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_ENDPOINT = "https://api.openai.com/v1/chat/completions"

# üîπ Configuration Bubble
BUBBLE_BASE_URL = "https://fitia-47460.bubbleapps.io/version-test/api/1.1/wf/"
BUBBLE_API_KEY = os.getenv("BUBBLE_API_KEY")

# üîπ V√©rification des cl√©s API
if not OPENAI_API_KEY:
    raise ValueError("‚ùå Cl√© API OpenAI manquante ! Ajoutez-la dans les variables d'environnement.")

if not BUBBLE_API_KEY:
    raise ValueError("‚ùå Cl√© API Bubble manquante ! Ajoutez-la dans les variables d'environnement.")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üìå Fonction pour envoyer les donn√©es √† Bubble Backend Workflows
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def send_to_bubble(endpoint, payload):
    """Envoie les donn√©es √† Bubble avec le header Authorization"""
    url = f"{BUBBLE_BASE_URL}{endpoint}"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {BUBBLE_API_KEY}"
    }
    
    response = requests.post(url, json=payload, headers=headers)
    
    print(f"‚û°Ô∏è Envoi √† Bubble : {url}\nüì¶ Payload : {json.dumps(payload, indent=2)}")
    print(f"üîÑ R√©ponse API Bubble : {response.status_code} | {response.text}")

    if response.status_code == 200:
        return response.json()  # Retourne le JSON d√©cod√©
    else:
        return None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üìå Fonction pour nettoyer la r√©ponse JSON d'OpenAI
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def clean_json_response(response_text):
    """
    Supprime les balises Markdown (```json ... ```).
    On ne garde que le contenu JSON brut.
    """
    # Retire les balises ```json ... ```
    cleaned_text = re.sub(r"```json\s*(.*?)\s*```", r"\1", response_text, flags=re.DOTALL)
    return cleaned_text.strip()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üìå G√©n√©ration du programme d'entra√Ænement avec OpenAI
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def generate_training_program(data):
    """
    G√©n√®re un programme structur√© via OpenAI, en JSON strict.
    """
    # Prompt un peu plus strict pour obtenir du JSON valide
    prompt = f"""
    Tu es un coach expert en planification d'entra√Ænements.
    G√©n√®re un programme d'entra√Ænement EN JSON STRICTEMENT VALIDE, sans commentaire ni texte hors du JSON.
    N'inclus pas d'expressions non num√©riques (p. ex. "10 par jambe") dans des champs num√©riques.

    Param√®tres √† prendre en compte :
    - Sport : {data["sport"]}
    - Niveau : {data["level"]}
    - Fr√©quence : {data["frequency"]} fois par semaine
    - Objectif : {data["goal"]}
    - Genre : {data["genre"]}

    La sortie doit √™tre uniquement du JSON, par exemple :
    ```json
    {{
      "programme": {{
        "nom": "{data.get('programme_nom', 'Programme personnalis√©')}",
        "dur√©e": {data.get('programme_duree', 12)},
        "list_cycles": [
          {{
            "nom": "Cycle 1",
            "dur√©e": 3,
            "list_semaines": [
              {{
                "num√©ro": 1,
                "list_s√©ances": [...]
              }}
            ]
          }}
        ]
      }}
    }}
    ```
    Aucune donn√©e hors du JSON.
    """

    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }

    # Pr√©pare la requ√™te √† OpenAI
    payload = {
        "model": "gpt-4o-mini",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7
    }

    # Envoi de la requ√™te
    response = requests.post(OPENAI_ENDPOINT, json=payload, headers=headers)

    if response.status_code != 200:
        print(f"‚ùå Erreur OpenAI : {response.status_code} | {response.text}")
        return None

    try:
        response_json = response.json()
        print(f"üîÑ R√©ponse OpenAI : {json.dumps(response_json, indent=2)}")

        if "choices" not in response_json or not response_json["choices"]:
            print("‚ùå OpenAI a renvoy√© une r√©ponse vide.")
            return None

        message_content = response_json["choices"][0]["message"]["content"]
        if not message_content:
            print("‚ùå OpenAI a renvoy√© un message vide.")
            return None

        # Nettoyage (suppression des balises Markdown)
        cleaned_json = clean_json_response(message_content)

        # Tentative de parsing en JSON
        return json.loads(cleaned_json)

    except json.JSONDecodeError as e:
        print(f"‚ùå Erreur JSON : {str(e)}")
        print(f"üîç R√©ponse brute OpenAI apr√®s nettoyage : {cleaned_json}")
        return None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üìå Fonction principale pour traiter le programme et l'envoyer √† Bubble
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def process_training_program(data):
    """
    1. G√©n√®re un programme via OpenAI
    2. L'envoie aux diff√©rentes API Workflows de Bubble (create_programme, create_cycle, etc.)
    """
    programme_data = generate_training_program(data)
    if not programme_data:
        return {"error": "√âchec de la g√©n√©ration du programme"}

    # 1Ô∏è‚É£ Enregistrement du Programme
    programme_payload = {
        "programme_nom": programme_data["programme"]["nom"],
        "programme_dur√©e": programme_data["programme"]["dur√©e"]
    }

    if "user_id" in data:
        programme_payload["user_id"] = data["user_id"]  # On ajoute l'ID de l'utilisateur si pr√©sent

    # Appel √† Bubble pour cr√©er le programme
    programme_response = send_to_bubble("create_programme", programme_payload)

    # V√©rification de la r√©ponse : ID dans programme_response["response"]["id"]
    if not programme_response or "response" not in programme_response or "id" not in programme_response["response"]:
        print(f"‚ùå Erreur : ID programme manquant dans la r√©ponse Bubble {programme_response}")
        return {"error": "ID programme manquant"}

    programme_id = programme_response["response"]["id"]
    print(f"‚úÖ Programme enregistr√© avec ID : {programme_id}")

    # V√©rifie qu'il y a bien "list_cycles" dans la structure
    if "list_cycles" not in programme_data["programme"]:
        # Pas de cycles => on s'arr√™te l√†
        return {"message": "Programme enregistr√© (aucun cycle renseign√©)."}

    # 2Ô∏è‚É£ Enregistrement des Cycles
    for cycle in programme_data["programme"]["list_cycles"]:
        cycle_nom = cycle.get("nom", "Cycle sans nom")
        cycle_duree = cycle.get("dur√©e", 1)

        cycle_response = send_to_bubble("create_cycle", {
            "programme_id": programme_id,
            "cycle_nom": cycle_nom,
            "cycle_dur√©e": cycle_duree
        })
        if not cycle_response or "response" not in cycle_response or "id" not in cycle_response["response"]:
            print(f"‚ùå Erreur : Impossible de cr√©er le cycle {cycle_nom}")
            continue

        cycle_id = cycle_response["response"]["id"]

        # Si on a une liste de semaines
        if "list_semaines" not in cycle:
            continue

        # 3Ô∏è‚É£ Enregistrement des Semaines
        for semaine in cycle["list_semaines"]:
            semaine_numero = semaine.get("num√©ro", 1)

            semaine_response = send_to_bubble("create_semaine", {
                "cycle_id": cycle_id,
                "semaine_numero": semaine_numero
            })
            if not semaine_response or "response" not in semaine_response or "id" not in semaine_response["response"]:
                print(f"‚ùå Erreur : Impossible de cr√©er la semaine {semaine_numero}")
                continue

            semaine_id = semaine_response["response"]["id"]

            # 4Ô∏è‚É£ Enregistrement des S√©ances
            if "list_s√©ances" not in semaine:
                continue

            for seance in semaine["list_s√©ances"]:
                seance_nom = seance.get("nom", "S√©ance")
                seance_numero = seance.get("num√©ro", 1)

                seance_response = send_to_bubble("create_seance", {
                    "semaine_id": semaine_id,
                    "seance_nom": seance_nom,
                    "seance_numero": seance_numero
                })
                if not seance_response or "response" not in seance_response or "id" not in seance_response["response"]:
                    print(f"‚ùå Erreur : Impossible de cr√©er la s√©ance {seance_nom}")
                    continue

                seance_id = seance_response["response"]["id"]

                # 5Ô∏è‚É£ Enregistrement des Exercices
                if "list_exercices" not in seance:
                    continue

                for exercice in seance["list_exercices"]:
                    exercice_nom = exercice.get("nom", "Exercice")
                    exercice_temps = exercice.get("temps_de_repos", 60)

                    exercice_response = send_to_bubble("create_exercice", {
                        "seance_id": seance_id,
                        "exercice_nom": exercice_nom,
                        "exercice_temps_repos": exercice_temps
                    })
                    if not exercice_response or "response" not in exercice_response or "id" not in exercice_response["response"]:
                        print(f"‚ùå Erreur : Impossible de cr√©er l'exercice {exercice_nom}")
                        continue

                    exercice_id = exercice_response["response"]["id"]

                    # 6Ô∏è‚É£ Enregistrement des S√©ries
                    if "list_s√©rie" not in exercice:
                        continue

                    for serie in exercice["list_s√©rie"]:
                        serie_charge = serie.get("charge", 0)
                        serie_reps = serie.get("r√©p√©titions", 0)
                        serie_nombre = serie.get("s√©ries", 1)

                        send_to_bubble("create_serie", {
                            "exercice_id": exercice_id,
                            "serie_charge": serie_charge,
                            "serie_repetitions": serie_reps,
                            "serie_nombre": serie_nombre
                        })

    return {"message": "Programme enregistr√© avec succ√®s !"}


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üìå Endpoint Flask pour g√©rer la g√©n√©ration du programme
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.route("/generate-program", methods=["POST"])
def generate_program():
    data = request.json
    result = process_training_program(data)
    # Si "message" est dans le dict => succ√®s (201), sinon (error) => 500
    return jsonify(result), 201 if "message" in result else 500


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üìå D√©marrage de l‚Äôapplication Flask
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)
