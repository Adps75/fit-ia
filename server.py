from flask import Flask, request, jsonify
import requests
import os

app = Flask(__name__)

# üîë Configuration OpenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_ENDPOINT = "https://api.openai.com/v1/chat/completions"

# üìå V√©rification de la cl√© API
if not OPENAI_API_KEY:
    raise ValueError("‚ùå Cl√© API OpenAI manquante ! Ajoutez-la dans les variables d'environnement.")

# üìå Prompt dynamique pour g√©n√©rer le programme
PROMPT_TEMPLATE = """
Tu es un coach expert en pr√©paration physique et en planification de programmes sportifs. 
G√©n√®re un programme d'entra√Ænement structur√© en cycles et semaines sous un format JSON bien d√©fini.

Le programme doit respecter la structure suivante :
{{
  "programme": {{
    "dur√©e": "{duration} semaines",
    "list_cycles": [
      {{
        "nom": "Nom du cycle",
        "dur√©e": "{cycle_duration} semaines",
        "list_semaines": [
          {{
            "num√©ro": {week_number},
            "list_s√©ances": [
              {{
                "nom": "Nom de la s√©ance",
                "num√©ro": {session_number},
                "list_exercices": [
                  {{
                    "nom": "Nom de l'exercice",
                    "list_s√©rie": [
                      {{
                        "charge": "{charge}",
                        "r√©p√©titions": {repetitions}
                      }}
                    ],
                    "temps_de_repos": "{rest_time} secondes"
                  }}
                ]
              }}
            ]
          }}
        ]
      }}
    ]
  }}
}}

üîπ **Contraintes :**  
- L'IA d√©finit dynamiquement **le nombre de semaines, cycles et s√©ances**.  
- **Les charges ne sont d√©finies que pour la premi√®re semaine.**  
- **Chaque semaine, une analyse adapte les charges et r√©p√©titions.**  

üìå **Profil utilisateur :**
- Sport : {sport}
- Niveau : {level}
- Fr√©quence d'entra√Ænement : {frequency} fois par semaine
- Objectif : {goal}
- Genre : {genre}

‚ö†Ô∏è **IMPORTANT :**  
- **Ne pas inclure de texte explicatif avant ou apr√®s le JSON.**  
- **Ne pas entourer la r√©ponse avec des balises Markdown.**  
- **Renvoyer uniquement le JSON brut.**
"""

def generate_training_program(data):
    """ üî• G√©n√®re un programme d'entra√Ænement personnalis√© """
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }

    user_prompt = PROMPT_TEMPLATE.format(
        sport=data["sport"],
        level=data["level"],
        frequency=data["frequency"],
        goal=data["goal"],
        duration=data.get("duration", "12"),  # L'IA d√©cide si non fourni
        cycle_duration=data.get("cycle_duration", "4"),
        week_number=1,
        session_number=1,
        charge="75% 1RM",  # **Uniquement pour la premi√®re semaine**
        repetitions=8,
        rest_time=90
    )

    payload = {
        "model": "gpt-4o-mini",
        "messages": [
            {"role": "system", "content": "Tu es un coach expert en programmation sportive."},
            {"role": "user", "content": user_prompt}
        ],
        "temperature": 0.7
    }

    response = requests.post(OPENAI_ENDPOINT, json=payload, headers=headers)

    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        return None

@app.route("/generate-program", methods=["POST"])
def generate_program():
    """ üìå API pour g√©n√©rer un programme et le retourner """
    data = request.json

    # üö® V√©rification des donn√©es re√ßues
    required_fields = ["sport", "level", "frequency", "goal", "genre"]
    if not all(field in data for field in required_fields):
        return jsonify({"error": "Donn√©es utilisateur incompl√®tes"}), 400

    program_json = generate_training_program(data)

    if program_json:
        return jsonify({"programme": program_json}), 201
    else:
        return jsonify({"error": "√âchec de la g√©n√©ration du programme"}), 500

@app.route("/analyse-progress", methods=["POST"])
def analyse_progress():
    """ üìä Analyse les performances et ajuste les charges pour la semaine suivante """
    data = request.json

    if "current_week" not in data or "performance_data" not in data:
        return jsonify({"error": "Donn√©es manquantes"}), 400

    prompt = f"""
    Tu es un coach de suivi personnalis√©.
    Voici les performances de l'utilisateur pour la semaine {data["current_week"]} :
    {data["performance_data"]}

    üîπ **Mission :**
    - Analyse ces r√©sultats et ajuste les charges et r√©p√©titions pour la semaine suivante.
    - Renvoye uniquement un JSON avec la mise √† jour des charges et r√©p√©titions.
    """

    payload = {
        "model": "gpt-4o-mini",
        "messages": [
            {"role": "system", "content": "Tu es un coach expert en analyse sportive."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7
    }

    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }

    response = requests.post(OPENAI_ENDPOINT, json=payload, headers=headers)

    if response.status_code == 200:
        return jsonify({"updated_plan": response.json()["choices"][0]["message"]["content"]}), 200
    else:
        return jsonify({"error": "√âchec de l'analyse"}), 500

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))  # Render assigne un port automatique
    app.run(host="0.0.0.0", port=port, debug=False)
