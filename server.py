from flask import Flask, request, jsonify
import requests
import os
import json

app = Flask(__name__)

# üîπ Configuration OpenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_ENDPOINT = "https://api.openai.com/v1/chat/completions"

# üîπ Configuration Bubble API
BUBBLE_API_BASE_URL = "https://fitia-47460.bubbleapps.io/version-test/api/1.1/wf"
BUBBLE_HEADERS = {"Content-Type": "application/json"}

# üîπ V√©rification de la cl√© API OpenAI
if not OPENAI_API_KEY:
    raise ValueError("‚ùå Cl√© API OpenAI manquante ! Ajoutez-la dans les variables d'environnement.")

# üìå Prompt pour la g√©n√©ration du programme d'entra√Ænement
PROMPT_TEMPLATE = """Tu es un coach expert en pr√©paration physique et en planification de programmes sportifs.
G√©n√®re un programme d'entra√Ænement structur√© en cycles et semaines sous un format JSON bien d√©fini.

G√©n√®re un programme d'entra√Ænement d√©taill√© en respectant cette structure :
{{
  "programme": {{
    "nom": "Programme personnalis√©",
    "dur√©e": "{duration} semaines",
    "list_cycles": [
      {{
        "nom": "Nom du cycle",
        "dur√©e": "{cycle_duration} semaines",
        "list_semaines": [
          {{
            "num√©ro": 1,
            "list_s√©ances": [
              {{
                "nom": "Nom de la s√©ance",
                "num√©ro": 1,
                "list_exercices": [
                  {{
                    "nom": "Nom de l'exercice",
                    "list_s√©rie": [
                      {{
                        "s√©ries": {series_count},
                        "charge": "{charge}",
                        "r√©p√©titions": {repetitions}
                      }}
                    ],
                    "temps_de_repos": "{rest_time} secondes"
                  }}
                ]
              }}
            ]
          }}
        ]
      }}
    ]
  }}
}}

Param√®tres :
- Sport : {sport}
- Niveau : {level}
- Fr√©quence d'entra√Ænement : {frequency} fois par semaine
- Objectif : {goal}
- Genre : {genre}

‚ö†Ô∏è **IMPORTANT** :
- **Ne pas inclure de texte explicatif avant ou apr√®s le JSON.**
- **Ne pas entourer la r√©ponse avec des balises Markdown.**
- **Renvoyer uniquement le JSON brut, sans texte additionnel.**
"""

def generate_training_program(data):
    """ üî• G√©n√®re un programme d'entra√Ænement via OpenAI API """
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }

    user_prompt = PROMPT_TEMPLATE.format(
        sport=data["sport"],
        level=data["level"],
        frequency=data["frequency"],
        goal=data["goal"],
        duration=data.get("duration", "12"),  # L'IA d√©cide si non fourni
        cycle_duration=data.get("cycle_duration", "4"),
        series_count=4,  # Nombre de s√©ries par d√©faut
        charge="75% 1RM",
        repetitions=8,
        rest_time=90,
        genre=data.get("genre", "Non sp√©cifi√©")
    )

    payload = {
        "model": "gpt-4o-mini",
        "messages": [
            {"role": "system", "content": "Tu es un coach expert en programmation sportive."},
            {"role": "user", "content": user_prompt}
        ],
        "temperature": 0.7
    }

    response = requests.post(OPENAI_ENDPOINT, json=payload, headers=headers)
    
    if response.status_code == 200:
        return json.loads(response.json()["choices"][0]["message"]["content"])
    else:
        return None

def send_to_bubble(endpoint, data):
    """ üî• Envoie les donn√©es vers Bubble """
    response = requests.post(f"{BUBBLE_API_BASE_URL}/{endpoint}", json=data, headers=BUBBLE_HEADERS)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"‚ùå Erreur sur {endpoint}: {response.text}")
        return None

@app.route("/generate-program", methods=["POST"])
def generate_program():
    """ üìå G√©n√®re un programme et l'enregistre dans Bubble """
    data = request.json
    program_data = generate_training_program(data)

    if not program_data:
        return jsonify({"error": "√âchec de la g√©n√©ration du programme"}), 500

    # 1Ô∏è‚É£ Enregistrer le Programme
    programme_response = send_to_bubble("create_programme", {
        "nom": program_data["programme"]["nom"],
        "dur√©e": program_data["programme"]["dur√©e"]
    })
    
    if not programme_response:
        return jsonify({"error": "√âchec de la cr√©ation du programme"}), 500

    programme_id = programme_response.get("id")

    # 2Ô∏è‚É£ Enregistrer les Cycles
    for cycle in program_data["programme"]["list_cycles"]:
        cycle_response = send_to_bubble("create_cycle", {
            "programme_id": programme_id,
            "nom": cycle["nom"],
            "dur√©e": cycle["dur√©e"]
        })
        if not cycle_response:
            continue

        cycle_id = cycle_response.get("id")

        # 3Ô∏è‚É£ Enregistrer les Semaines
        for semaine in cycle["list_semaines"]:
            semaine_response = send_to_bubble("create_semaine", {
                "cycle_id": cycle_id,
                "num√©ro": semaine["num√©ro"]
            })
            if not semaine_response:
                continue

            semaine_id = semaine_response.get("id")

            # 4Ô∏è‚É£ Enregistrer les S√©ances
            for seance in semaine["list_s√©ances"]:
                seance_response = send_to_bubble("create_seance", {
                    "semaine_id": semaine_id,
                    "nom": seance["nom"],
                    "num√©ro": seance["num√©ro"]
                })
                if not seance_response:
                    continue

                seance_id = seance_response.get("id")

                # 5Ô∏è‚É£ Enregistrer les Exercices
                for exercice in seance["list_exercices"]:
                    exercice_response = send_to_bubble("create_exercice", {
                        "seance_id": seance_id,
                        "nom": exercice["nom"],
                        "temps_de_repos": exercice["temps_de_repos"]
                    })
                    if not exercice_response:
                        continue

                    exercice_id = exercice_response.get("id")

                    # 6Ô∏è‚É£ Enregistrer les S√©ries
                    for serie in exercice["list_s√©rie"]:
                        send_to_bubble("create_serie", {
                            "exercice_id": exercice_id,
                            "charge": serie["charge"],
                            "r√©p√©titions": serie["r√©p√©titions"],
                            "s√©ries": serie["s√©ries"]
                        })

    return jsonify({"message": "Programme enregistr√© avec succ√®s !"}), 201

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))  # Render assigne un port automatiquement
    app.run(host="0.0.0.0", port=port, debug=False)
